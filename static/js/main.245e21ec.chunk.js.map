{"version":3,"sources":["components/StockPriceTable.js","components/PriceChart.js","App.js","customHooks/useStockMarketData.js","index.js"],"names":["StockPriceTable","priceData","setSelectedTicker","tickerSymbols","Object","keys","Table","striped","bordered","hover","variant","Array","isArray","map","item","arrLength","length","currPrice","price","color","prevPrice","getColor","style","cursor","key","onClick","backgroundColor","PriceChart","data","ticker","reduce","acc","curr","timestamp","height","label","defaultProps","App","historicalData","useState","currentStockPriceData","setCurrentStockPriceData","setHistoricalData","websocketError","setWebSocketError","useEffect","WebSocket","onmessage","event","JSON","parse","mergedData","latestData","Date","error","useStockMarketData","selectedTicker","Container","display","justifyContent","alignItems","Spinner","animation","marginLeft","flexDirection","padding","gridTemplateColumns","gridGap","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.245e21ec.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\nimport { Table } from \"react-bootstrap\";\n\nconst StockPriceTable = ({ priceData, setSelectedTicker }) => {\n\tconst tickerSymbols = Object.keys(priceData);\n\n\tconst getColor = (currPrice, prevPrice) => {\n\t\tif (!prevPrice) {\n\t\t\treturn;\n\t\t} else if (currPrice < prevPrice) {\n\t\t\treturn \"red\";\n\t\t}\n\t\treturn \"green\";\n\t};\n\n\tconst renderTicker = (item) => {\n\t\tconst arrLength = priceData[item].length;\n\t\tconst currPrice = priceData[item][arrLength - 1].price;\n\t\tconst prevPrice =\n\t\t\tpriceData[item][arrLength - 2] && priceData[item][arrLength - 2].price;\n\t\tconst color = getColor(currPrice, prevPrice);\n\t\treturn (\n\t\t\t<tr\n\t\t\t\tstyle={{ cursor: \"pointer\" }}\n\t\t\t\tkey={item}\n\t\t\t\tonClick={() => setSelectedTicker(item)}>\n\t\t\t\t<td>{item}</td>\n\t\t\t\t<td style={{ backgroundColor: color && color }}>{currPrice}</td>\n\t\t\t</tr>\n\t\t);\n\t};\n\n\treturn (\n\t\t<Table striped bordered hover variant=\"dark\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Ticker</th>\n\t\t\t\t\t<th>Price</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{Array.isArray(tickerSymbols) && tickerSymbols.map(renderTicker)}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nStockPriceTable.propTypes = {\n\tpriceData: propTypes.objectOf(\n\t\tpropTypes.arrayOf(\n\t\t\tpropTypes.shape({\n\t\t\t\ttimestamp: propTypes.date,\n\t\t\t\tprice: propTypes.number,\n\t\t\t})\n\t\t)\n\t).isRequired,\n\tsetSelectedTicker: propTypes.func.isRequired,\n};\n\nexport default StockPriceTable;\n","import React from \"react\";\nimport { LineChart } from \"react-chartkick\";\nimport \"chart.js\";\nimport propTypes from \"prop-types\";\n\nconst PriceChart = ({ data }) => {\n\tconst getRenderData = (priceData) =>\n\t\tpriceData.reduce((acc, curr) => {\n\t\t\tacc[curr.timestamp] = curr.price;\n\t\t\treturn acc;\n\t\t}, {});\n\n\treturn data.ticker ? (\n\t\t<div>\n\t\t\t<h1>{data.ticker}</h1>\n\t\t\t<LineChart\n\t\t\t\tdata={getRenderData(data.priceData)}\n\t\t\t\theight=\"500px\"\n\t\t\t\tlabel={data.ticker}\n\t\t\t/>\n\t\t</div>\n\t) : (\n\t\t<p>Please select a ticker</p>\n\t);\n};\n\nPriceChart.propTypes = {\n\tdata: propTypes.shape({\n\t\tpriceData: propTypes.arrayOf(\n\t\t\tpropTypes.shape({\n\t\t\t\ttimestamp: propTypes.date,\n\t\t\t\tprice: propTypes.number,\n\t\t\t})\n\t\t),\n\t\tticker: propTypes.string,\n\t}),\n};\n\nPriceChart.defaultProps = {\n\tdata: null,\n};\n\nexport default PriceChart;\n","import React, { useState } from \"react\";\nimport { Container, Spinner } from \"react-bootstrap\";\n\nimport { StockPriceTable, PriceChart } from \"./components\";\nimport useStockMarketData from \"./customHooks/useStockMarketData\";\n\nfunction App() {\n\tconst historicalData = useStockMarketData();\n\tconst [selectedTicker, setSelectedTicker] = useState();\n\n\tconst renderError = () => (\n\t\t<Container>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tbackgroundColor: \"lightGrey\",\n\t\t\t\t}}>\n\t\t\t\t<Spinner animation=\"border\" />\n\t\t\t\t<h1 style={{ marginLeft: \"10px\" }}>Loading...</h1>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\tpadding: \"10px\",\n\t\t\t\t}}>\n\t\t\t\t<p>This site can't work until you allow insecure connection</p>\n\t\t\t\t<p>This is just a dummy app, no harm will be caused by this</p>\n\t\t\t\t<p>\n\t\t\t\t\tTo allow insecre app, follow these steps for google chrome: Open\n\t\t\t\t\tchrome settings -{\">\"} Privacy & Security -{\">\"} Click on site\n\t\t\t\t\tsettings -{\">\"} click on additional content settings -{\">\"} Click on\n\t\t\t\t\tinsecure content and add https://sumeetrohra.github.io/proximity-test\n\t\t\t\t\tunder allow section -{\">\"} Reload the page\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</Container>\n\t);\n\n\tconst renderChart = () => (\n\t\t<Container\n\t\t\tstyle={{\n\t\t\t\tdisplay: \"grid\",\n\t\t\t\tgridTemplateColumns: \"1fr 4fr\",\n\t\t\t\tgridGap: \"20px\",\n\t\t\t\tmarginTop: \"20px\",\n\t\t\t}}>\n\t\t\t<StockPriceTable\n\t\t\t\tpriceData={historicalData}\n\t\t\t\tsetSelectedTicker={setSelectedTicker}\n\t\t\t/>\n\t\t\t<PriceChart\n\t\t\t\tdata={{\n\t\t\t\t\tticker: selectedTicker,\n\t\t\t\t\tpriceData: historicalData[selectedTicker],\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Container>\n\t);\n\n\treturn historicalData.error ? renderError() : renderChart();\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\n\nexport default () => {\n\tconst [currentStockPriceData, setCurrentStockPriceData] = useState([]);\n\tconst [historicalData, setHistoricalData] = useState({});\n\tconst [websocketError, setWebSocketError] = useState(false);\n\n\tconst ENDPOINT = \"ws://stocks.mnet.website\";\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tconst connection = new WebSocket(ENDPOINT);\n\t\t\tconnection.onmessage = (event) =>\n\t\t\t\tsetCurrentStockPriceData(JSON.parse(event.data));\n\t\t} catch {\n\t\t\tsetWebSocketError(true);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst mergedData = Array.isArray(currentStockPriceData)\n\t\t\t? currentStockPriceData.reduce((acc, curr) => {\n\t\t\t\t\tconst ticker = curr[0];\n\t\t\t\t\tconst price = curr[1];\n\n\t\t\t\t\tconst latestData = {\n\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\tprice,\n\t\t\t\t\t};\n\n\t\t\t\t\tacc[ticker] = Array.isArray(acc[ticker])\n\t\t\t\t\t\t? [...acc[ticker], latestData]\n\t\t\t\t\t\t: [latestData];\n\t\t\t\t\treturn acc;\n\t\t\t  }, historicalData)\n\t\t\t: [];\n\n\t\tsetHistoricalData(mergedData);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [currentStockPriceData]);\n\n\treturn websocketError\n\t\t? { error: \"insecure Web Socket connection\" }\n\t\t: historicalData;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}